openapi: 3.0.0
info:
  title: Blog Website API
  description: API documentation for the Blog Website application.
  version: 1.0.0
  contact:
    name: Abdul Aziz
    url: https://connect2abdulaziz.github.io/abdulaziz/
    email: connect2abdulaziz@gmail.com

servers:
  - url: https://blog-website-three-peach.vercel.app/api/v1
    description: vercel development server

tags:
  - name: Users
    description: Endpoints related to user management
  - name: Posts
    description: Endpoints related to blog post management
  - name: Comments
    description: Endpoints related to comment management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: Test@123
        confirmPassword:
          type: string
          format: password
          example: Test@123

    Post:
      type: object
      properties:
        title:
          type: string
          example: My First Blog Post
        content:
          type: string
          example: This is the content of the blog post...
        categoryId:
          type: integer
          example: 1
        readTime:
          type: integer
          example: 10

    Comment:
      type: object
      properties:
        content:
          type: string
          example: Great post!
        postId:
          type: integer
          example: 1
        parentId:
          type: integer
          example: NULL

paths:
  /users/signup:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request

  /users/login:
    post:
      tags:
        - Users
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  format: password
                  example: Test@123
      responses:
        "200":
          description: Login successful
          headers:
            Authorization:
              schema:
                type: string
                example: Bearer <JWT Token>
              description: The JWT token generated after successful login
        "401":
          description: Unauthorized

  /users/forgot-password:
    post:
      tags:
        - Users
      summary: Request a password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john.doe@example.com
      responses:
        "200":
          description: Password reset email sent
        "400":
          description: Bad request

  /users/reset-password/{token}:
    post:
      tags:
        - Users
      summary: Reset password using the token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: NewPass@123
                confirmPassword:
                  type: string
                  format: password
                  example: NewPass@123
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /users/verify-email/{token}:
    post:
      tags:
        - Users
      summary: Verify email address using the token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verified successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of users
        "401":
          description: Unauthorized

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User details
        "401":
          description: Unauthorized

  /users/update:
    patch:
      tags:
        - Users
      summary: Update the currently authenticated user's details
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /users/delete:
    delete:
      tags:
        - Users
      summary: Delete the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        "204":
          description: User deleted successfully
        "401":
          description: Unauthorized

  /users/change-password:
    patch:
      tags:
        - Users
      summary: Change the password of the currently authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                  example: OldPass@123
                newPassword:
                  type: string
                  format: password
                  example: NewPass@123
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /users/logout:
    post:
      tags:
        - Users
      summary: Logout the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
        "401":
          description: Unauthorized

  /posts:
    post:
      tags:
        - Posts
      summary: Create a new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "201":
          description: Post created successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    get:
      tags:
        - Posts
      summary: Get all posts
      parameters:
        - in: query
          name: searchBy
          schema:
            type: string
          description: Search posts by title or category
      responses:
        "200":
          description: List of posts

  paths:
  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            description: The unique identifier of the post
      responses:
        "200":
          description: Post along with comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique identifier for the post
                  title:
                    type: string
                    description: Title of the post
                  content:
                    type: string
                    description: The text content of the post
                  createdAt:
                    type: string
                    format: date-time
                    description: The date and time when the post was created
                  updatedAt:
                    type: string
                    format: date-time
                    description: The date and time when the post was last updated
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Unique identifier for the comment
                        userId:
                          type: integer
                          description: Unique identifier for the user who made the comment
                        content:
                          type: string
                          description: The text content of the comment
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the comment was created
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the comment was last updated

    patch:
      tags:
        - Posts
      summary: Update a post by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      responses:
        "200":
          description: Post updated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    delete:
      tags:
        - Posts
      summary: Delete a post by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Post deleted successfully
        "401":
          description: Unauthorized

  /posts/{id}/my-posts:
    get:
      tags:
        - Posts
      summary: Get posts created by the currently authenticated user
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: searchBy
          schema:
            type: string
          description: Search posts by title or category
      responses:
        "200":
          description: List of posts by the user
        "401":
          description: Unauthorized

  /comments:
    post:
      tags:
        - Comments
      summary: Add a new comment to a post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description: Comment added successfully
        "400":
          description: Bad request

  /comments/{postId}:
    get:
      tags:
        - Comments
      summary: Get all comments for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of comments

  /comments/{id}/replies:
    get:
      tags:
        - Comments
      summary: Get all replies for a specific comment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of replies

  /comments/{id}:
    patch:
      tags:
        - Comments
      summary: Update a comment by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          description: Comment updated successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    delete:
      tags:
        - Comments
      summary: Delete a comment by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Comment deleted successfully
        "401":
          description: Unauthorized
